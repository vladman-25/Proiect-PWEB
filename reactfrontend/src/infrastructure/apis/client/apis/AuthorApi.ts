/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthorAddDTO,
  AuthorDTOPagedResponseRequestResponse,
  AuthorDTORequestResponse,
  AuthorUpdateDTO,
  RequestResponse,
} from '../models';
import {
    AuthorAddDTOFromJSON,
    AuthorAddDTOToJSON,
    AuthorDTOPagedResponseRequestResponseFromJSON,
    AuthorDTOPagedResponseRequestResponseToJSON,
    AuthorDTORequestResponseFromJSON,
    AuthorDTORequestResponseToJSON,
    AuthorUpdateDTOFromJSON,
    AuthorUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiAuthorAddPostRequest {
    authorAddDTO?: AuthorAddDTO;
}

export interface ApiAuthorDeleteIdDeleteRequest {
    id: string;
}

export interface ApiAuthorGetByIdIdGetRequest {
    id: string;
}

export interface ApiAuthorGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiAuthorUpdatePutRequest {
    authorUpdateDTO?: AuthorUpdateDTO;
}

/**
 * 
 */
export class AuthorApi extends runtime.BaseAPI {

    /**
     */
    async apiAuthorAddPostRaw(requestParameters: ApiAuthorAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Author/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorAddDTOToJSON(requestParameters.authorAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthorAddPost(requestParameters: ApiAuthorAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAuthorAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthorDeleteIdDeleteRaw(requestParameters: ApiAuthorDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAuthorDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Author/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthorDeleteIdDelete(requestParameters: ApiAuthorDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAuthorDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthorGetByIdIdGetRaw(requestParameters: ApiAuthorGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAuthorGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Author/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthorGetByIdIdGet(requestParameters: ApiAuthorGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorDTORequestResponse> {
        const response = await this.apiAuthorGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthorGetPageGetRaw(requestParameters: ApiAuthorGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Author/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthorGetPageGet(requestParameters: ApiAuthorGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorDTOPagedResponseRequestResponse> {
        const response = await this.apiAuthorGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuthorUpdatePutRaw(requestParameters: ApiAuthorUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Author/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorUpdateDTOToJSON(requestParameters.authorUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthorUpdatePut(requestParameters: ApiAuthorUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAuthorUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
