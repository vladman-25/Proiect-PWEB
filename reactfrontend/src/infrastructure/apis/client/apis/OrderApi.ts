/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OrderAddDTO,
  OrderDTOPagedResponseRequestResponse,
  OrderDTORequestResponse,
  OrderUpdateDTO,
  RequestResponse,
} from '../models';
import {
    OrderAddDTOFromJSON,
    OrderAddDTOToJSON,
    OrderDTOPagedResponseRequestResponseFromJSON,
    OrderDTOPagedResponseRequestResponseToJSON,
    OrderDTORequestResponseFromJSON,
    OrderDTORequestResponseToJSON,
    OrderUpdateDTOFromJSON,
    OrderUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiOrderAddPostRequest {
    orderAddDTO?: OrderAddDTO;
}

export interface ApiOrderDeleteIdDeleteRequest {
    id: string;
}

export interface ApiOrderGetByIdIdGetRequest {
    id: string;
}

export interface ApiOrderGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiOrderUpdatePutRequest {
    orderUpdateDTO?: OrderUpdateDTO;
}

/**
 * 
 */
export class OrderApi extends runtime.BaseAPI {

    /**
     */
    async apiOrderAddPostRaw(requestParameters: ApiOrderAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Order/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderAddDTOToJSON(requestParameters.orderAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOrderAddPost(requestParameters: ApiOrderAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiOrderAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrderDeleteIdDeleteRaw(requestParameters: ApiOrderDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiOrderDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Order/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOrderDeleteIdDelete(requestParameters: ApiOrderDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiOrderDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrderGetByIdIdGetRaw(requestParameters: ApiOrderGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiOrderGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Order/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOrderGetByIdIdGet(requestParameters: ApiOrderGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderDTORequestResponse> {
        const response = await this.apiOrderGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrderGetPageGetRaw(requestParameters: ApiOrderGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Order/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOrderGetPageGet(requestParameters: ApiOrderGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderDTOPagedResponseRequestResponse> {
        const response = await this.apiOrderGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrderUpdatePutRaw(requestParameters: ApiOrderUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Order/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderUpdateDTOToJSON(requestParameters.orderUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOrderUpdatePut(requestParameters: ApiOrderUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiOrderUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
