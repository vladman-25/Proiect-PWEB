/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressAddDTO,
  AddressDTOPagedResponseRequestResponse,
  AddressDTORequestResponse,
  AddressUpdateDTO,
  RequestResponse,
} from '../models';
import {
    AddressAddDTOFromJSON,
    AddressAddDTOToJSON,
    AddressDTOPagedResponseRequestResponseFromJSON,
    AddressDTOPagedResponseRequestResponseToJSON,
    AddressDTORequestResponseFromJSON,
    AddressDTORequestResponseToJSON,
    AddressUpdateDTOFromJSON,
    AddressUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiAddressAddPostRequest {
    addressAddDTO?: AddressAddDTO;
}

export interface ApiAddressDeleteIdDeleteRequest {
    id: string;
}

export interface ApiAddressGetByIdIdGetRequest {
    id: string;
}

export interface ApiAddressGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiAddressUpdatePutRequest {
    addressUpdateDTO?: AddressUpdateDTO;
}

/**
 * 
 */
export class AddressApi extends runtime.BaseAPI {

    /**
     */
    async apiAddressAddPostRaw(requestParameters: ApiAddressAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Address/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressAddDTOToJSON(requestParameters.addressAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAddressAddPost(requestParameters: ApiAddressAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAddressAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAddressDeleteIdDeleteRaw(requestParameters: ApiAddressDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAddressDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Address/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAddressDeleteIdDelete(requestParameters: ApiAddressDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAddressDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAddressGetByIdIdGetRaw(requestParameters: ApiAddressGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAddressGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Address/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAddressGetByIdIdGet(requestParameters: ApiAddressGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressDTORequestResponse> {
        const response = await this.apiAddressGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAddressGetPageGetRaw(requestParameters: ApiAddressGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Address/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAddressGetPageGet(requestParameters: ApiAddressGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressDTOPagedResponseRequestResponse> {
        const response = await this.apiAddressGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAddressUpdatePutRaw(requestParameters: ApiAddressUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Address/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddressUpdateDTOToJSON(requestParameters.addressUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAddressUpdatePut(requestParameters: ApiAddressUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAddressUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
